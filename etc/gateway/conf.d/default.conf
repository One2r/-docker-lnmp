upstream default {
    ip_hash;
    server nginx:9527 max_fails=30 fail_timeout=10s;
}

server {
    listen       80;
    listen  [::]:80;

    access_log  logs/default.access.log main;
    error_log   logs/default.error.log;
    
    default_type 'text/plain';
    resolver 127.0.0.11;

    location @proxy {
        access_by_lua_block {
			local circuitbreaker = require "circuitbreaker"
            local cb = circuitbreaker.get_circuit_breaker(ngx.var.uri, ngx.var.host)
            local _, err_cb = cb:_before()
            if err_cb then
                  ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
            end
		}

        log_by_lua_block {
			local circuitbreaker = require "circuitbreaker"
            local cb = circuitbreaker.get_circuit_breaker(ngx.var.uri, ngx.var.host)
			local generation = cb._generation

            local ok = ngx.status and ngx.status < 400
            cb:_after(generation, ok)
		}

        proxy_pass http://default;
        include proxy_params;
    }

    location @proxy-with-waf {
        modsecurity on;
        modsecurity_rules_file /usr/local/openresty/nginx/waf/waf.conf;

        access_by_lua_block {
			local circuitbreaker = require "circuitbreaker"
            local cb = circuitbreaker.get_circuit_breaker(ngx.var.uri, ngx.var.host)
            local _, err_cb = cb:_before()
            if err_cb then
                  ngx.exit(ngx.HTTP_TOO_MANY_REQUESTS)
            end
		}

        log_by_lua_block {
			local circuitbreaker = require "circuitbreaker"
            local cb = circuitbreaker.get_circuit_breaker(ngx.var.uri, ngx.var.host)
			local generation = cb._generation

            local ok = ngx.status and ngx.status < 500
            cb:_after(generation, ok)
		}

        proxy_pass http://default;
        include proxy_params;
    }

    location /
    {
        rewrite_by_lua_file "/usr/local/openresty/nginx/waf/luascript/processing.lua";
    }
}
